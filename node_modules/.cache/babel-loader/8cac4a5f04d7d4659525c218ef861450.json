{"ast":null,"code":"var _jsxFileName = \"/Users/stephenayoola/Documents/GitHub/OptimalWeather/src/components/Details/Details.tsx\";\nimport React, { useState } from 'react';\nimport './Details.scss';\nexport const getDataToRender = (renderFiltered, dataArr, props) => {\n  var _props$weatherObj;\n\n  return renderFiltered ? dataArr : (_props$weatherObj = props.weatherObj) === null || _props$weatherObj === void 0 ? void 0 : _props$weatherObj.data;\n}; // export const filterData = (props: responseData) => (\n//   minOrMaxValue: string,\n//   inputValue: number\n// ) => (setData: (value: any) => void) => {\n//   const filtered = props?.weatherObj?.data?.filter((day) => {\n//     if (minOrMaxValue === 'min') {\n//       return day.min_temp <= inputValue\n//     }\n//     if (minOrMaxValue === 'max') {\n//       return day.max_temp >= inputValue\n//     }\n//   })\n//   setData(filtered)\n// }\n\nexport const handleNumberInput = setValue => e => {\n  const target = e.target;\n  setValue(parseInt(target.value));\n};\nexport default function Details(props) {\n  var _props$weatherObj2, _props$weatherObj3;\n\n  const [data, setData] = useState([]);\n  const [renderFiltered, setRenderFiltered] = useState(false);\n  const dataToRender = getDataToRender(renderFiltered, data, props);\n  const currentDate = new Date();\n\n  const dateForecast = datafordate => {\n    let dateTimeMap = new Date(datafordate);\n    const mappedDate = dateTimeMap.toDateString();\n    return mappedDate;\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"detailsbody\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 5\n    }\n  }, props.error && /*#__PURE__*/React.createElement(\"p\", {\n    className: \"warning\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 23\n    }\n  }, \"Please choose a city.\"), ((_props$weatherObj2 = props.weatherObj) === null || _props$weatherObj2 === void 0 ? void 0 : _props$weatherObj2.data) && props.type === 'current' && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 11\n    }\n  }, currentDate.toDateString()), /*#__PURE__*/React.createElement(\"h5\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 11\n    }\n  }, currentDate.toLocaleTimeString()), /*#__PURE__*/React.createElement(\"h3\", {\n    className: \"city-style\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }\n  }, props.weatherObj.data[0].city_name)), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 11\n    }\n  }, Math.round(props.weatherObj.data[0].temp), \" \\xB0C\"), /*#__PURE__*/React.createElement(\"img\", {\n    alt: \"weather icon\",\n    src: `https://www.weatherbit.io/static/img/icons/${props.weatherObj.data[0].weather.icon}.png`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 11\n    }\n  })), ((_props$weatherObj3 = props.weatherObj) === null || _props$weatherObj3 === void 0 ? void 0 : _props$weatherObj3.data) && props.type === 'sixteenDays' && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    className: \"city-style\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 38\n    }\n  }, props.weatherObj.city_name)), /*#__PURE__*/React.createElement(\"h3\", {\n    className: \"city-style\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 11\n    }\n  }, currentDate.toDateString())), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"weather-list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 11\n    }\n  }, dataToRender !== undefined && dataToRender.map(day => /*#__PURE__*/React.createElement(\"dl\", {\n    className: \"day\",\n    key: day.datetime,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"dt\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 19\n    }\n  }, dateForecast(day.datetime)), /*#__PURE__*/React.createElement(\"img\", {\n    alt: \"weather icon\",\n    className: \"image\",\n    src: `https://www.weatherbit.io/static/img/icons/${day.weather.icon}.png`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 19\n    }\n  }), /*#__PURE__*/React.createElement(\"dd\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 19\n    }\n  }, \" Min: \", Math.round(day.min_temp), \"\\xB0C \"), /*#__PURE__*/React.createElement(\"dd\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 19\n    }\n  }, \" Max \", Math.round(day.max_temp), \"\\xB0C \"))))));\n}","map":{"version":3,"sources":["/Users/stephenayoola/Documents/GitHub/OptimalWeather/src/components/Details/Details.tsx"],"names":["React","useState","getDataToRender","renderFiltered","dataArr","props","weatherObj","data","handleNumberInput","setValue","e","target","parseInt","value","Details","setData","setRenderFiltered","dataToRender","currentDate","Date","dateForecast","datafordate","dateTimeMap","mappedDate","toDateString","error","type","toLocaleTimeString","city_name","Math","round","temp","weather","icon","undefined","map","day","datetime","min_temp","max_temp"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport Temperature from '../Temperature/Temperature'\nimport handleSetFilter from '../../utils/handleSetState'\nimport './Details.scss'\n\ninterface dataObj {\n  city_name?: string\n  datetime: string\n  max_temp: number\n  min_temp: number\n  temp: number\n  weather: {\n    icon: string\n  }\n}\ntype dataArr = dataObj[]\n\nexport interface weatherData {\n  data?: dataArr\n  city_name?: string\n}\nexport interface responseData {\n  weatherObj?: weatherData\n  error?: boolean\n  type?: string\n  filter?: boolean\n}\n\nexport const getDataToRender = (\n  renderFiltered: boolean,\n  dataArr: dataArr | undefined,\n  props: responseData\n) => {\n  return renderFiltered ? dataArr : props.weatherObj?.data\n}\n\n// export const filterData = (props: responseData) => (\n//   minOrMaxValue: string,\n//   inputValue: number\n// ) => (setData: (value: any) => void) => {\n//   const filtered = props?.weatherObj?.data?.filter((day) => {\n//     if (minOrMaxValue === 'min') {\n//       return day.min_temp <= inputValue\n//     }\n//     if (minOrMaxValue === 'max') {\n//       return day.max_temp >= inputValue\n//     }\n//   })\n//   setData(filtered)\n// }\n\nexport const handleNumberInput = (setValue: (value: number) => void) => (\n  e: React.FormEvent<HTMLInputElement>\n) => {\n  const target = e.target as HTMLInputElement\n  setValue(parseInt(target.value))\n}\n\nexport default function Details(props: responseData) {\n  const [data, setData] = useState<[]>([])\n  const [renderFiltered, setRenderFiltered] = useState(false)\n  const dataToRender = getDataToRender(renderFiltered, data, props)\n  const currentDate = new Date();\n  const dateForecast = (datafordate: string) => {\n    let dateTimeMap = new Date(datafordate)\n    const mappedDate = dateTimeMap.toDateString()\n    return mappedDate\n  }\n  return (\n    <div className='detailsbody'>\n      {props.error && <p className='warning'>Please choose a city.</p>}\n      {props.weatherObj?.data && props.type === 'current' && (\n        <div>\n          <h3>{currentDate.toDateString()}</h3>\n          <h5>{currentDate.toLocaleTimeString()}</h5>\n          <h3 className='city-style'>\n            <strong>{props.weatherObj.data[0].city_name}</strong>\n          </h3>\n          <p>{Math.round(props.weatherObj.data[0].temp)} °C</p>\n          <img\n            alt='weather icon'\n            src={`https://www.weatherbit.io/static/img/icons/${props.weatherObj.data[0].weather.icon}.png`}\n          />\n        </div>\n      )}\n      {props.weatherObj?.data && props.type === 'sixteenDays' && (\n        <>\n          <div> \n          <h3 className='city-style'><strong>{props.weatherObj.city_name}</strong></h3>\n          <h3 className='city-style'>{currentDate.toDateString()}</h3>\n          </div>\n          <div className='weather-list'>\n            {dataToRender !== undefined && \n              dataToRender.map((day) =>(\n                <dl className='day' key={day.datetime}>\n                  <dt>{dateForecast(day.datetime)}</dt>\n                  <img\n                    alt='weather icon'\n                    className='image'\n                    src={`https://www.weatherbit.io/static/img/icons/${day.weather.icon}.png`}\n                  />\n                  <dd> Min: {Math.round(day.min_temp)}°C </dd>\n                  <dd> Max {Math.round(day.max_temp)}°C </dd>\n                </dl>\n              )) }\n          </div>\n        </>\n      )}\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}