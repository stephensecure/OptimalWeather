{"ast":null,"code":"export const fetchData = (forecastType, city) => async (setWeatherObj) => {\n  try {\n    const res = await fetch(`https://weatherbit-v1-mashape.p.rapidapi.com/${forecastType}?lang=en&city=${city}`, {\n      method: 'GET',\n      headers: {\n        'x-rapidapi-host': 'weatherbit-v1-mashape.p.rapidapi.com',\n        \"x-rapidapi-key\": \"12dfd0ae84msheb33158fbc2b3a3p194f0djsnec051d7b0c10\"\n      }\n    });\n    const jsonRes = await res.json();\n    setWeatherObj(jsonRes);\n  } catch (err) {\n    console.error(err);\n  }\n};\n\nconst getWeatherForecast = (setError, setWeatherObj) => (forecastType, city) => e => {\n  e.preventDefault();\n  if (city.length === 0) return setError(true);\n  setError(false);\n  setWeatherObj({});\n  fetchData(forecastType, city)(setWeatherObj);\n};\n\nexport default getWeatherForecast;","map":{"version":3,"sources":["/Users/stephenayoola/Documents/GitHub/OptimalWeather/src/utils/getWeatherForecast.tsx"],"names":["fetchData","forecastType","city","setWeatherObj","res","fetch","method","headers","jsonRes","json","err","console","error","getWeatherForecast","setError","e","preventDefault","length"],"mappings":"AAGA,OAAO,MAAMA,SAAS,GAAG,CAACC,YAAD,EAAuBC,IAAvB,KAAwC,OAC/DC,aAD+D,KAE5D;AACH,MAAI;AACF,UAAMC,GAAG,GAAG,MAAMC,KAAK,CACpB,gDAA+CJ,YAAa,iBAAgBC,IAAK,EAD7D,EAErB;AACEI,MAAAA,MAAM,EAAE,KADV;AAEEC,MAAAA,OAAO,EAAE;AACP,2BAAmB,sCADZ;AAEP,0BAAkB;AAFX;AAFX,KAFqB,CAAvB;AAUI,UAAMC,OAAO,GAAG,MAAMJ,GAAG,CAACK,IAAJ,EAAtB;AACAN,IAAAA,aAAa,CAACK,OAAD,CAAb;AACD,GAbL,CAaM,OAAOE,GAAP,EAAY;AACZC,IAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AACD;AACF,CAnBE;;AAqBP,MAAMG,kBAAkB,GAAG,CACzBC,QADyB,EAEzBX,aAFyB,KAGtB,CAACF,YAAD,EAAuBC,IAAvB,KAAyCa,CAAD,IAA6B;AACxEA,EAAAA,CAAC,CAACC,cAAF;AACA,MAAId,IAAI,CAACe,MAAL,KAAgB,CAApB,EAAuB,OAAOH,QAAQ,CAAC,IAAD,CAAf;AACvBA,EAAAA,QAAQ,CAAC,KAAD,CAAR;AACAX,EAAAA,aAAa,CAAC,EAAD,CAAb;AACAH,EAAAA,SAAS,CAACC,YAAD,EAAeC,IAAf,CAAT,CAA8BC,aAA9B;AACD,CATD;;AAWA,eAAeU,kBAAf","sourcesContent":["import React from 'react'\nimport { responseData } from '../components/Details/Details'\n\nexport const fetchData = (forecastType: string, city: string) => async (\n  setWeatherObj: (value: responseData) => void\n) => {\n  try {\n    const res = await fetch(\n      `https://weatherbit-v1-mashape.p.rapidapi.com/${forecastType}?lang=en&city=${city}`,\n      {\n        method: 'GET',\n        headers: {\n          'x-rapidapi-host': 'weatherbit-v1-mashape.p.rapidapi.com',\n          \"x-rapidapi-key\": \"12dfd0ae84msheb33158fbc2b3a3p194f0djsnec051d7b0c10\",\n        },\n      }\n    )\n        const jsonRes = await res.json()\n        setWeatherObj(jsonRes)\n      } catch (err) {\n        console.error(err)\n      }\n    }\n\nconst getWeatherForecast = (\n  setError: (value: boolean) => void,\n  setWeatherObj: (value: responseData) => void\n) => (forecastType: string, city: string) => (e: React.SyntheticEvent) => {\n  e.preventDefault()\n  if (city.length === 0) return setError(true)\n  setError(false)\n  setWeatherObj({})\n  fetchData(forecastType, city)(setWeatherObj)\n}\n\nexport default getWeatherForecast\n"]},"metadata":{},"sourceType":"module"}